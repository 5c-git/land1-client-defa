// === SUPPRESS SASS "mixed-decls" WARNINGS ===
const originalStderrWrite = process.stderr.write;

process.stderr.write = function (chunk, encoding, callback) {
  const msg = chunk.toString();

  // –ü–æ–¥–∞–≤–ª—è–µ–º –≤–æ—Ä–Ω–∏–Ω–≥–∏ Sass
  if (
    // –ü–æ–¥–∞–≤–ª—è–µ–º –≤–æ—Ä–Ω–∏–Ω–≥–∏ –ø—Ä–æ "mixed-decls"
    msg.includes('[mixed-decls]') ||
    msg.includes('sass-lang.com/d/mixed-decls') ||
    msg.includes('Sass\'s behavior for declarations that appear after nested rules will be changing') ||
    msg.includes('repetitive deprecation warnings omitted') ||

    // –ü–æ–¥–∞–≤–ª—è–µ–º legacy JS API warning
    msg.includes('The legacy JS API is deprecated and will be removed in Dart Sass') ||
    msg.includes('sass-lang.com/d/legacy-js-api')
  ) {
    return true;
  }

  return originalStderrWrite.apply(process.stderr, arguments);
};
// === END SUPPRESSION ===

const path = require('path');
const glob = require('glob');
const os = require('os');
const HtmlWebpackPlugin = require('html-webpack-plugin');
const MiniCssExtractPlugin = require('mini-css-extract-plugin');
const SpriteLoaderPlugin = require("svg-sprite-loader/plugin");
const CopyWebpackPlugin = require('copy-webpack-plugin');
const pugDependencies = [
  ...glob.sync(path.resolve(__dirname, 'src/components/**/*.pug')),
  ...glob.sync(path.resolve(__dirname, 'src/components/**/*.js')),
  ...glob.sync(path.resolve(__dirname, 'src/components/**/*.scss')),
];

const isProduction = process.env.NODE_ENV === 'production';
const devStyleLoader = isProduction ? MiniCssExtractPlugin.loader : 'style-loader';

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π HtmlWebpackPlugin –¥–ª—è –≤—Å–µ—Ö .pug –≤ src/pages
const pages = glob.sync('./src/pages/**/*.pug');

const htmlPlugins = pages.map((file) => {
  const filename = path.basename(file, '.pug') + '.html';
  return new HtmlWebpackPlugin({
    filename,
    template: file,
    inject: 'body',
    minify: false, // ‚Üê –≤–æ—Ç —ç—Ç–æ –æ—Ç–∫–ª—é—á–∞–µ—Ç –º–∏–Ω–∏—Ñ–∏–∫–∞—Ü–∏—é
  });
});

module.exports = {
  entry: {
    urlapp: `./src/urlapp.js`,
    bundle: `./src/index.js`,
    common: `./src/common.js`,
    // specificPage: `./src/specificPage.js`,
  },
  output: {
    path: isProduction ? path.resolve(__dirname, 'build') : undefined,
    filename: 'js/[name].js', // –±—É–¥–µ—Ç build/js/bundle.js –∏ vendors.js
    assetModuleFilename: 'assets/[name][ext][query]',
    clean: isProduction,
  },
  optimization: {
    minimize: false,
    minimizer: [],
    splitChunks: {
      cacheGroups: {
        vendors: {
          name: `vendors`,
          test: /node_modules/,
          chunks: `all`,
          enforce: true,
        },
      },
    },
  },
  cache: {
    type: 'filesystem',
    compression: 'brotli', // –º–æ–∂–Ω–æ 'gzip' –∏–ª–∏ 'brotli' –¥–ª—è –µ—â—ë –±—ã—Å—Ç—Ä–µ–µ
    allowCollectingMemory: true,
    buildDependencies: {
      config: [__filename], // —Å–ª–µ–¥–∏—Ç –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º –∫–æ–Ω—Ñ–∏–≥–∞
      pug: pugDependencies, // –º–∞—Å—Å–∏–≤ —Ñ–∞–π–ª–æ–≤ .pug –∏–∑ –ø–∞–ø–∫–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    },
  },
  module: {
    rules: [
      {
        test: /\.js$/,
        loader: 'esbuild-loader',
        options: {
          loader: 'js',
          target: 'es2017',
        },
        exclude: [
          /node_modules/,
          path.resolve(__dirname, 'src/common.js'),
          path.resolve(__dirname, 'src/urlapp.js'),
        ],
      },
      {
        test: /\.pug$/,
        exclude: /node_modules/,
        use: [
          {
            loader: 'thread-loader',
            options: {
              workers: os.cpus().length - 1,
            },
          },
          {
            loader: 'pug-loader',
            options: {
              pretty: true,
              cache: true,
            },
          },
        ],
      },
      {
        test: /\.s[ac]ss$/i,
        use: [
          devStyleLoader,
          {
            loader: 'css-loader',
            options: {
              modules: {
                auto: true,
              },
              url: false,
              sourceMap: true,
            },
          },
          {
            loader: 'sass-loader',
            options: {
              sourceMap: true,
              additionalData: `@use "utils/utils.scss" as *;`,
              sassOptions: {
                outputStyle: 'expanded',  // –ó–∞—Å—Ç–∞–≤–ª—è–µ—Ç Sass –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –±–æ–ª–µ–µ —á–∏—Ç–∞–±–µ–ª—å–Ω—ã–π, —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π CSS –±–µ–∑ –º–∏–Ω–∏—Ñ–∏–∫–∞—Ü–∏–∏.
                includePaths: [path.resolve(__dirname, 'src')],
                quietDeps: true, // ‚úÖ –≥–ª—É—à–∏–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
                logger: {
                  warn(message, options) {
                    if (
                      typeof message === 'string' &&
                      message.includes('[mixed-decls]')
                    ) {
                      return; // üí• –ø–æ–¥–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–æ—Ä–Ω–∏–Ω–≥
                    }

                    // –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –≤–æ—Ä–Ω–∏–Ω–≥–∏ ‚Äî –æ—Å—Ç–∞–≤–ª—è–µ–º
                    console.warn(message);
                  }
                }
              },
            },
          },
        ],
      },
      {
        test: /\.css$/i,
        use: [
          devStyleLoader,
          {
            loader: 'css-loader',
            options: {
              modules: { auto: true },
              url: false,
              sourceMap: true,
            },
          },
        ],
      },
      // { // –≠—Ç–æ –Ω–æ–≤–∞—è —Ñ–∏—à–∫–∞ WP5 –Ω–æ –º–Ω–µ –Ω–µ –ø–æ–¥–æ—à–ª–∞ –∏–∑-–∑–∞ Pug.
      //   test: /\.(png|jpe?g|gif|svg|woff2?|ttf|eot)$/i,
      //   type: 'asset/resource',
      //   exclude: path.resolve(__dirname, 'src/assets/icons'), // –∏—Å–∫–ª—é—á–∞–µ–º svg –∏–∑ –ø–∞–ø–∫–∏ icons
      //   generator: {
      //     filename: (pathData) => {
      //       // pathData.filename ‚Äî –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
      //       // –ù—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ src/assets –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ

      //       // –Ω–∞–ø—Ä–∏–º–µ—Ä: src/assets/images/photo.png -> images/photo.png

      //       const relativePath = path.relative(path.resolve(__dirname, 'src/assets'), pathData.filename);
      //       return `assets/${relativePath}`;
      //     }
      //   },
      // },
      {
        test: /\.svg$/i,
        include: path.resolve(__dirname, 'src/assets/icons'), // –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –∏–∫–æ–Ω–∫–∞–º–∏
        use: [
          {
            loader: 'svg-sprite-loader',
            options: {
              extract: false,       // –ù–ï –≤—ã–Ω–æ—Å–∏—Ç—å —Å–ø—Ä–∞–π—Ç –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª ‚Äî –≤—Å—Ç–∞–≤–ª—è—Ç—å inline
              runtimeCompat: true,  // –ø–æ–¥–¥–µ—Ä–∂–∫–∞ IE (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
              // extract: true, // –í—ã–Ω–µ—Å—Ç–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª
              // spriteFilename: 'sprite.svg', // –∏–º—è —Ñ–∞–π–ª–∞ —Å–ø—Ä–∞–π—Ç–∞
            }
          },
          // 'svgo-loader' // –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è SVG
        ]
      },
    ],
  },
  plugins: [
    ...htmlPlugins,
    new SpriteLoaderPlugin({
      plainSprite: true
    }),
    new MiniCssExtractPlugin({
      filename: 'css/[name].css',
    }),
    new CopyWebpackPlugin({
      patterns: [
        {  // –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –±–µ–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–±–æ—Ä—â–∏–∫–∞.
          from: path.resolve(__dirname, 'src/common.js'),
          to: path.resolve(__dirname, 'build/js/common.js'),
        },
        {
          from: path.resolve(__dirname, 'src/assets/'),
          to: 'assets/',
          globOptions: {
            ignore: ['**/icons/**'], // –∏—Å–∫–ª—é—á–∞–µ–º –≤—Å—é –ø–∞–ø–∫—É icons
          },
          noErrorOnMissing: true,
        },
        {
          from: `./src/libsJQ`,
          to: `libsJQ/`
        },
      ],
    }),
  ],
  devServer: {
    static: {
      directory: path.resolve(__dirname, 'src'),
      watch: true,
    },
    compress: true,
    port: 3000,
    open: true,
    hot: true,
    client: {
      overlay: false, // –Ω–µ —Ç–æ—Ä–º–æ–∑–∏—Ç –Ω–∞ –æ—à–∏–±–∫–∞—Ö
    },
    watchFiles: ['src/**/*.pug'],
  },
  resolve: {
    extensions: ['.js'],
    modules: [path.resolve(__dirname, 'src'), 'node_modules'],
  },
  stats: {
    warnings: false,
    children: true,
    errorDetails: true,
    modules: false,
    entrypoints: false,
    chunks: false,
    assets: false,
    builtAt: false,
    version: false,
  },
  mode: isProduction ? 'production' : 'development',
};
